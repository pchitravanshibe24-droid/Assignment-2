
   Q5(b) - Program to store and display a Tri-Diagonal Matrix 
   efficiently using 1D array


#include <iostream>
using namespace std;

class TriDiagonalMatrix {
    int *A, n;
public:
    TriDiagonalMatrix(int n) {
        this->n = n;
        A = new int[3 * n - 2];
    }

    void set(int i, int j, int val) {
        if (i - j == 0)
            A[n - 1 + i - 1] = val;      // main diagonal
        else if (i - j == 1)
            A[i - 2] = val;              // lower diagonal
        else if (i - j == -1)
            A[2 * n - 1 + i - 1] = val;  // upper diagonal
    }

    int get(int i, int j) {
        if (i - j == 0)
            return A[n - 1 + i - 1];
        else if (i - j == 1)
            return A[i - 2];
        else if (i - j == -1)
            return A[2 * n - 1 + i - 1];
        else
            return 0;
    }

    void display() {
        cout << "\nTri-Diagonal Matrix:\n";
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++)
                cout << get(i, j) << " ";
            cout << endl;
        }
    }
};

int main() {
    int n;
    cout << "Enter the size of the Tri-Diagonal matrix (n x n): ";
    cin >> n;
    TriDiagonalMatrix td(n);

    cout << "Enter elements row-wise:\n";
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            int x;
            cin >> x;
            td.set(i, j, x);
        }
    }

    td.display();
    return 0;
}
